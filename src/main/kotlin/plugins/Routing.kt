package com.alokkumar.plugins

import com.alokkumar.auth.UserCredential
import com.alokkumar.auth.hashPassword
import com.alokkumar.repository.TodoRepository
import com.alokkumar.repository.UserRepository
import com.alokkumar.data.User
import com.alokkumar.auth.JwtService
import com.alokkumar.data.Todo
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.configureRouting() {
    val userRepository = UserRepository()
    val todoRepository = TodoRepository()
    val jwtService = JwtService()

    routing {
        // Public registration route
        post("/register") {
            val userCredentials = call.receive<UserCredential>()
            val hashedPassword = hashPassword(userCredentials.password)
            val newUser = User(
                id = 0, // ID will be auto-generated by the database
                name = "User", // You can add a name field to UserCredential
                email = userCredentials.email,
                password = hashedPassword
            )
            val addedUser = userRepository.addUser(newUser)
            call.respond(HttpStatusCode.Created, mapOf("id" to addedUser.id))
        }

        // Public login route
        post("/login") {
            val userCredentials = call.receive<UserCredential>()
            val user = userRepository.findUserByEmail(userCredentials.email)

            if (user != null && user.password == hashPassword(userCredentials.password)) {
                val token = jwtService.generateToken(user)
                call.respond(mapOf("token" to token))
            } else {
                call.respond(HttpStatusCode.Unauthorized, "Invalid credentials")
            }
        }

        // Protected routes (require a valid JWT)
        authenticate("auth-jwt") {
            // Your existing Todo endpoints
            get("/todos") {
                val todos = todoRepository.getAllTodos()
                call.respond(todos)
            }

            get("/todos/{id}") {
                val id = call.parameters["id"]?.toIntOrNull()
                if (id == null) {
                    call.respondText("Invalid ID", status = HttpStatusCode.BadRequest)
                    return@get
                }
                val todo = todoRepository.getTodo(id)
                if (todo != null) {
                    call.respond(todo)
                } else {
                    call.respondText("Todo not found", status = HttpStatusCode.NotFound)
                }
            }

            // Add post, put, and delete routes here inside the authenticate block
            post("/todos") {
                val todo = call.receive<Todo>()
                val newTodo = todoRepository.addTodo(todo)
                call.respond(newTodo)
            }

            put("/todos/{id}") {
                val id = call.parameters["id"]?.toIntOrNull()
                if (id == null) {
                    call.respondText("Invalid ID", status = HttpStatusCode.BadRequest)
                    return@put
                }
                val todo = call.receive<Todo>()
                val updatedTodo = todoRepository.updateTodo(id, todo)
                if (updatedTodo != null) {
                    call.respond(updatedTodo)
                } else {
                    call.respondText("Todo not found", status = HttpStatusCode.NotFound)
                }
            }

            delete("/todos/{id}") {
                val id = call.parameters["id"]?.toIntOrNull()
                if (id == null) {
                    call.respondText("Invalid ID", status = HttpStatusCode.BadRequest)
                    return@delete
                }
                val deleted = todoRepository.deleteTodo(id)
                if (deleted) {
                    call.respondText("Todo deleted successfully", status = HttpStatusCode.OK)
                } else {
                    call.respondText("Todo not found", status = HttpStatusCode.NotFound)
                }
            }
        }
    }
}